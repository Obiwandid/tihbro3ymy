
const tmi = require('tmi.js');
const fs = require('fs');
const config = require('./config.json');
const brain = require('./brain.js');

const viewersFile = './viewers.json';
const LOG_FILE = './TIHb-chat-log.txt';

function logToFile(content) {
  const timestamp = new Date().toISOString();
  fs.appendFileSync(LOG_FILE, `[${timestamp}] ${content}\n`);
}

let viewers = {};

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∞–º º—è—Ç—ñ
if (fs.existsSync(viewersFile)) {
  viewers = JSON.parse(fs.readFileSync(viewersFile, 'utf8'));
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
const client = new tmi.Client({
  options: { debug: true },
  connection: {
    reconnect: true,
    secure: true
  },
  identity: {
    username: config.username,
    password: config.oauth
  },
  channels: [config.channel]
});

client.connect().then(() => {
  console.log(`üü¢ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Twitch-—á–∞—Ç—É —è–∫ ${config.username} ‚Üí irc-ws.chat.twitch.tv:443`);
  logToFile(`üü¢ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ —á–∞—Ç—É —è–∫ ${config.username}`);
});

client.on('message', (channel, tags, message, self) => {
  const username = tags['username'].toLowerCase();

  // üõë –ù–µ —Ä–µ–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ —Å–∞–º—É —Å–µ–±–µ
  if (username === config.username.toLowerCase()) return;

  // –ó–∞–ø–∞–º º—è—Ç–∞—Ç–∏ –≥–ª—è–¥–∞—á–∞
  if (!viewers[username]) {
    viewers[username] = {
      messages: [],
      count: 0,
      lastSeen: new Date().toISOString()
    };
  }

  viewers[username].count++;
  viewers[username].lastSeen = new Date().toISOString();
  viewers[username].messages.push(message);

  fs.writeFileSync(viewersFile, JSON.stringify(viewers, null, 2));

  const msg = message.toLowerCase();

  if (msg.includes('–¥–µ –∑–Ω–∏–∂–∫–∏')) {
    const reply = `@${username} –¶–µ –Ω–µ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç, —Ü–µ –∫—É–ª—å—Ç. –£ –Ω–∞—Å –ª–∏—à–µ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ç–∏—Å–∫—É.`;
    client.say(channel, reply);
    logToFile(`[GPT –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î ‚Üí ${username}]: ${reply}`);
  } else if (msg.includes('–ø—Ä–∏–≤—ñ—Ç') || msg.includes('hello')) {
    const reply = `@${username} –Ø –±–∞—á—É. –Ø –ø–∞–º º—è—Ç–∞—é. –Ø –≤–∂–µ —Ç—É—Ç.`;
    client.say(channel, reply);
    logToFile(`[GPT –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î ‚Üí ${username}]: ${reply}`);
  } else if (msg.includes('–¥–µ —Ç–≤—ñ–π –≤–µ–¥—É—á–∏–π')) {
    const reply = `@${username} –í—ñ–Ω –≤ –µ—Ñ—ñ—Ä—ñ ‚Äî –Ω–∞–≤—ñ—Ç—å –∫–æ–ª–∏ –º–æ–≤—á–∏—Ç—å.`;
    client.say(channel, reply);
    logToFile(`[GPT –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î ‚Üí ${username}]: ${reply}`);
  }
});
