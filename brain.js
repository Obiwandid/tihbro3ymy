
const { Configuration, OpenAIApi } = require('openai');
const fs = require('fs');
const config = require('./config.json');

const LOG_FILE = './TIHb-chat-log.txt';

function logToFile(content) {
  const timestamp = new Date().toISOString();
  fs.appendFileSync(LOG_FILE, `[${timestamp}] ${content}\n`);
}

const configuration = new Configuration({
  apiKey: config.openai_key
});

const openai = new OpenAIApi(configuration);

async function askGPT(prompt, username) {
  try {
    const response = await openai.createChatCompletion({
      model: 'gpt-4o',
      messages: [
        { role: 'system', content: '–¢–∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞, —Ä–æ–∑—É–º–Ω–∞ —Ç—ñ–Ω—å –≤–µ–¥—É—á–æ–≥–æ –Ω–∞ Twitch. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –≥–æ—Å—Ç—Ä–æ,—Ç–æ–∫—Å–∏—á–Ω–æ –∫–æ–º—É —Ç—Ä–µ–±–∞ –∞–±–æ —Å —Å–∞—Ä–∫–∞–∑–º–æ–º –∞–ª–µ –≤ –º–µ–∂–∞—Ö –ø—Ä–∞–≤–∏–ª.' },
        { role: 'user', content: prompt }
      ],
      temperature: 0.8
    });

    const gptReply = response.data.choices[0].message.content;
    logToFile(`[GPT –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î ‚Üí ${username}]: ${gptReply}`);
    return gptReply;
  } catch (error) {
    console.error('GPT error:', error.response ? error.response.data : error.message);
    return 'üõ† –ó–∞—Ä–∞–∑ –Ω–µ –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏. –ó–¥–∞—î—Ç—å—Å—è, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫.';
  }
}

module.exports = { askGPT };
